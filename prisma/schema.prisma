generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  name                                                   String?
  email                                                  String?             @unique
  emailVerified                                          String?
  image                                                  String?
  role                                                   String?
  password                                               String?
  job_title                                              String?
  company                                                String?
  twitter                                                String?
  instagram                                              String?
  linkedin                                               String?
  user_otp                                               String?
  plan                                                   String?             @default("Free")
  current_balance                                        Decimal?            @default(0.00) @db.Decimal
  total_revenue                                          Decimal?            @default(0.00) @db.Decimal
  request_approved                                       Boolean             @default(true)
  id                                                     BigInt              @id @default(autoincrement())
  affiliateCode                                          String?             @unique @db.Uuid
  created_at                                             DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  affiliateRevenues                                      AffiliateRevenue[]
  AffiliateRevenue_AffiliateRevenue_referredUserIdToUser AffiliateRevenue[]  @relation("AffiliateRevenue_referredUserIdToUser")
  referredUsers                                          AffiliateTracking[] @relation("affiliate")
  referredByUser                                         AffiliateTracking[] @relation("customer")
  creatorPayouts                                         CreatorPayout[]
  creatorRevenues                                        CreatorRevenue[]
  CreatorRevenue_CreatorRevenue_referredUserIdToUser     CreatorRevenue[]    @relation("CreatorRevenue_referredUserIdToUser")
  EventNote                                              EventNote[]
  mailings                                               Mailing[]
  movies                                                 Movie[]
  streamSessions                                         StreamSession[]
  watchLists                                             WatchList[]
  events                                                 events[]
  notifications                                          notifications[]
  tickets                                                tickets[]
  storagePlans                                           user_storage_plan[]

  @@index([current_balance], map: "idx_user_current_balance")
  @@index([name], map: "idx_user_name")
  @@index([user_otp], map: "idx_user_otp")
  @@index([role], map: "idx_user_role")
  @@index([total_revenue], map: "idx_user_total_revenue")
}

model Movie {
  id                   BigInt             @id @default(autoincrement())
  imageString          String?
  title                String?
  age                  BigInt?
  duration             Float?
  overview             String?
  release              BigInt?
  videoSource          String?
  category             String?
  youtubeString        String?
  createdAt            DateTime?          @default(now()) @db.Timestamptz(6)
  price                BigInt?            @default(0)
  userId               BigInt?
  totalviews           BigInt?
  approval_status      String?
  isaffiliate          Boolean?           @default(false)
  commissionPercentage Decimal?           @default(0.00) @db.Decimal
  user                 User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  WatchLists           WatchList[]
  AffiliateRevenue     AffiliateRevenue[]
  creatorRevenues      CreatorRevenue[]

  @@index([category])
  @@index([approval_status])
  @@index([createdAt])
  @@index([userId, approval_status, createdAt], map: "idx_movie_userid_status_createdat")
}

model purchased_videos {
  user_email  String?
  youtube_url String?
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  id          BigInt    @id @default(autoincrement())
}

model WatchList {
  id      BigInt  @id @default(autoincrement())
  userId  BigInt?
  movieId BigInt?
  Movie   Movie?  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model VerificationToken {
  identifier String?
  token      String?
  expires    DateTime? @db.Timestamptz(6)

  @@ignore
}

model events {
  id                   BigInt             @id @default(autoincrement())
  title                String
  date                 DateTime           @db.Timestamptz(6)
  description          String?
  price                Int
  totalTickets         Int
  availableTickets     Int
  imageUrl             String?
  streamUrl            String?
  isLive               Boolean            @default(false)
  created_at           DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?          @default(now()) @db.Timestamptz(6)
  userId               BigInt
  status               String             @default("upcoming")
  isaffiliate          Boolean?           @default(false)
  commissionPercentage Decimal?           @db.Decimal
  bookingDate          DateTime           @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  trailerUrl           String?
  agoraChannel         String?            @unique @default(uuid()) @db.Uuid
  activeStreams        Int?               @default(0)
  maxCoStreamers       Int?               @default(4)
  defaultLayout        String             @default("grid") @db.VarChar(255)
  streamLayout         Json?
  isMultiStream        Boolean            @default(false)
  isTopRated           Boolean?           @default(false)
  soldOut              Boolean?           @default(false)
  recordingUrl         String?
  allowRecordingAccess Boolean?           @default(false)
  recordingAccessCode  String?            @unique
  streamVia            String?            @db.VarChar(100)
  streamId             String?            @db.VarChar(255)
  liveStreamURLs       Json               @default("{}")
  EventNote            EventNote[]
  streamSessions       StreamSession[]
  user                 User               @relation(fields: [userId], references: [id])
  tickets              tickets[]
  CreatorRevenue       CreatorRevenue[]
  AffiliateRevenue     AffiliateRevenue[]

  @@index([status, date])
  @@index([userId, status])
  @@index([isLive, status])
  @@index([date])
  @@index([status])
  @@index([userId])
  @@index([isTopRated(sort: Desc), status, date], map: "idx_events_status_toprated_date")
  @@index([liveStreamURLs], map: "idx_live_stream_urls", type: Gin)
  @@index([streamId], map: "idx_stream_id")
  @@index([streamVia], map: "idx_stream_via")
  @@index([streamVia, streamId], map: "idx_stream_via_id")
}

model StreamSession {
  id         BigInt   @id(map: "stream_sessions_pkey") @default(autoincrement())
  eventId    BigInt
  userId     BigInt
  deviceType String
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  layout     String   @default("grid") @db.VarChar(255)
  position   Int      @default(0)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "StreamSession_user_id_fkey")
  event      events   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event")

  @@index([active], map: "idx_stream_sessions_active")
  @@index([eventId], map: "idx_stream_sessions_event")
  @@index([userId], map: "idx_stream_sessions_user")
  @@map("StreamSession")
}

model tickets {
  id           BigInt    @id @default(autoincrement())
  ticketCode   String    @unique
  qrCode       String    @unique
  purchaseDate DateTime? @default(now()) @db.Timestamptz(6)
  status       String?   @default("active")
  eventId      BigInt?
  userId       BigInt
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  payment      payments?
  event        events?   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status, eventId])
  @@index([userId, status])
  @@index([purchaseDate])
  @@index([status, userId, eventId], map: "idx_tickets_status_userid_eventid")
  @@index([eventId])
  @@index([status, eventId, userId])
  @@index([status])
  @@index([userId])
}

model payments {
  id            BigInt    @id @default(autoincrement())
  amount        Int
  status        String
  paymentMethod String
  transactionId String    @unique
  ticketId      BigInt?   @unique
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  metadata      Json?
  ticket        tickets?  @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([status, createdAt])
  @@index([paymentMethod])
  @@index([status, paymentMethod, createdAt], map: "idx_payments_status_method_createdat")
}

model notifications {
  id            BigInt    @id @default(autoincrement())
  title         String
  message       String
  type          String
  is_read       Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  metadata      Json?     @default("{}")
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  email_sent    Boolean   @default(false)
  email_sent_at DateTime? @db.Timestamptz(6)
  userId        BigInt?
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type, email_sent, created_at], map: "idx_notifications_type_email_sent")
  @@index([created_at])
  @@index([is_read])
  @@index([userId])
}

model AffiliateRevenue {
  id                                         BigInt    @id(map: "affiliaterevenue_pkey") @default(autoincrement())
  affiliateId                                BigInt
  amount                                     Decimal   @db.Decimal(10, 2)
  sourceType                                 String
  sourceId                                   BigInt
  isPaid                                     Boolean?  @default(false)
  paidAt                                     DateTime? @db.Timestamptz(6)
  createdAt                                  DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt                                  DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  referredUserId                             BigInt?
  transactionId                              String
  affiliate                                  User      @relation(fields: [affiliateId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_affiliate")
  User_AffiliateRevenue_referredUserIdToUser User?     @relation("AffiliateRevenue_referredUserIdToUser", fields: [referredUserId], references: [id], onUpdate: NoAction, map: "fk_referred_user")
  movie                                      Movie?    @relation(fields: [movieId], references: [id])
  event                                      events?   @relation(fields: [eventId], references: [id])
  movieId                                    BigInt?
  eventId                                    BigInt?

  @@index([referredUserId])
  @@index([affiliateId, isPaid, createdAt], map: "idx_affiliate_revenue_affiliateid_ispaid_createdat")
  @@index([affiliateId], map: "idx_affiliaterevenue_affiliateid")
  @@index([createdAt], map: "idx_affiliaterevenue_createdat")
  @@index([sourceType, sourceId], map: "idx_affiliaterevenue_source")
}

model AffiliateTracking {
  id              BigInt   @id @default(autoincrement())
  userId          BigInt?
  affiliateUserId BigInt?
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  affiliateUser   User?    @relation("affiliate", fields: [affiliateUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            User?    @relation("customer", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, affiliateUserId])
  @@index([affiliateUserId])
  @@index([userId])
}

model CreatorRevenue {
  id                                       BigInt         @id @default(autoincrement())
  creatorId                                BigInt
  amount                                   Decimal        @db.Decimal(10, 2)
  sourceType                               String
  sourceId                                 BigInt
  isPaid                                   Boolean?       @default(false)
  paidAt                                   DateTime?      @db.Timestamptz(6)
  createdAt                                DateTime?      @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt                                DateTime?      @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  referredUserId                           BigInt?
  transactionId                            String
  payoutId                                 Int?
  creator                                  User           @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payout                                   CreatorPayout? @relation(fields: [payoutId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_CreatorRevenue_referredUserIdToUser User?          @relation("CreatorRevenue_referredUserIdToUser", fields: [referredUserId], references: [id], onUpdate: NoAction)
  movie                                    Movie?         @relation(fields: [movieId], references: [id])
  event                                    events?        @relation(fields: [eventId], references: [id])
  movieId                                  BigInt?
  eventId                                  BigInt?

  @@index([payoutId])
  @@index([creatorId], map: "CreatorRevenue_affiliateid_idx")
  @@index([createdAt], map: "CreatorRevenue_createdat_idx")
  @@index([referredUserId])
  @@index([sourceType, sourceId], map: "CreatorRevenue_sourcetype_sourceid_idx")
  @@index([creatorId, createdAt], map: "idx_creator_revenue_creatorid_createdat")
  @@index([creatorId, isPaid, amount], map: "idx_creator_revenue_creatorid_ispaid_amount")
}

model CreatorPayout {
  id               Int              @id @default(autoincrement())
  creatorId        BigInt
  totalAmount      Decimal          @db.Decimal(10, 2)
  commissionAmount Decimal          @db.Decimal(10, 2)
  payoutAmount     Decimal          @db.Decimal(10, 2)
  status           String
  paymentMethod    String?
  paymentDetails   Json?
  createdAt        DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  creator          User             @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  revenues         CreatorRevenue[]

  @@index([creatorId])
  @@index([status])
}

model refunds {
  id            BigInt    @id @default(autoincrement())
  paymentId     BigInt    @unique
  amount        Decimal?  @db.Decimal
  status        String?
  reason        String?
  refundedAt    DateTime? @db.Timestamptz(6)
  transactionId String    @unique
  paymentMethod String?
  metadata      Json?     @db.Json
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([status])
  @@index([paymentId])
}

model Mailing {
  id        BigInt    @id @default(autoincrement())
  title     String?
  content   Json?
  status    String?   @default("'draft'")
  userId    BigInt?
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EventNote {
  id        BigInt    @id @default(autoincrement())
  content   String?
  eventId   BigInt?
  userId    BigInt?
  createdAt DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  events    events?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// This model contains storage plan for each user
model user_storage_plan {
  id          BigInt    @id @default(autoincrement())
  type        String?   @default("Free")
  total       Int       @default(5120)
  used        Float     @default(0)
  status      String?
  user_id     BigInt?   @unique
  start_date  DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  end_date    DateTime? 
  User        User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum device_type {
  webcam
  mobile
  screen
}
